Report generated: 2025-08-31 03:53:43

==============================
Markdown files in repository:
==============================
mission_challenge.md
README.md
SOLUTION_README.md
WARP.md

====================================
Markdown file contents (verbatim):
====================================

----- BEGIN FILE: mission_challenge.md -----

# Space Mission Log Analysis Challenge

## Background
You are a data analyst at the Interplanetary Space Agency. Your task is to analyze a complex log file containing data about thousands of space missions conducted between 2030 and 2070. We want to find the security code of the **longest successful Mars mission** in the database.

## Instructions
1. You are provided with a file called `space_missions.log`
2. The file contains information about space missions with fields separated by '|' characters
3. Fields: Date | Mission ID | Destination | Status | Crew Size | Duration (days) | Success Rate | Security Code
4. Use awk to analyze this file and find the mission that meets the criteria
5. Submit the security code as your answer (format: ABC-123-XYZ)

## Tips
- The file contains commented lines (starting with #) and other irrelevant data
- Field separators may have inconsistent spacing
- Only consider missions with "Completed" status
- "Duration" is measured in days

## Example Line
```
2045-07-12 | KLM-1234 | Mars | Completed | 5 | 387 | 98.7 | TRX-842-YHG
```

Good luck, analyst!


----- END FILE: mission_challenge.md -----

----- BEGIN FILE: README.md -----

# Warp Hiring Challenge

## About
This is a programming challenge for candidates who are interested in applying to Warp. It's meant to be short and fun -- we highly encourage you to use Agent Mode in Warp to solve the challenge! There will be fields in the application for you to share your answer and a link to Warp Shared Block containing the command you used to solve the problem.

Participation in the challenge is optional. You can still submit an application without doing the hiring challenge.

Get started by reading the [challenge description](mission_challenge.md). Good luck!

----- END FILE: README.md -----

----- BEGIN FILE: SOLUTION_README.md -----

# Space Mission Log Analysis - AWK Solution

## Goal
Find the security code of the longest successful Mars mission from a large log file containing space mission data.

## Dataset Format
The log file `space_missions.log` contains ~105K lines with the following format:
```
Date | Mission ID | Destination | Status | Crew Size | Duration (days) | Success Rate | Security Code
```

### Constraints
- Fields are pipe-separated with inconsistent whitespace
- Comments start with `#` and should be ignored
- Header lines contain "Date" and should be skipped
- Only consider missions with:
  - Destination: "Mars" (case-insensitive)
  - Status: "Completed" (case-insensitive)
- Duration field may contain extra text like "365 days" or "approx. 400"
- Security codes follow pattern ABC-123-XYZ

## Approach
Use AWK to parse the file, filter for completed Mars missions, extract numeric durations, and track the maximum to find the corresponding security code.

## AWK Techniques Used

### Field Separator with Regex
```awk
FS = "[[:space:]]*\\|[[:space:]]*"
```
Handles pipes with variable surrounding whitespace.

### Skipping Comments and Headers
```awk
/^[[:space:]]*#/ || /^[[:space:]]*$/ { next }  # Skip comments/blank lines
$1 ~ /Date/ { next }                            # Skip headers
```

### Field Trimming
```awk
gsub(/^[[:space:]]+|[[:space:]]+$/, "", field)
```
Removes leading and trailing whitespace from each field.

### Case-Insensitive Filtering
```awk
if (tolower(destination) != "mars") next
if (tolower(status) != "completed") next
```

### Robust Numeric Extraction
```awk
if (match(duration_raw, /[0-9]+(\.[0-9]+)?/)) {
    duration = substr(duration_raw, RSTART, RLENGTH) + 0
}
```
Extracts the first number from text like "365 days" or "approx. 400".

### Security Code Pattern Extraction
```awk
if (match(max_code, /[A-Z]{3}-[0-9]{3}-[A-Z]{3}/)) {
    max_code = substr(max_code, RSTART, RLENGTH)
}
```
Extracts clean ABC-123-XYZ pattern from noisy fields.

## Why This Solution Works

### Correctness
- **Proper Filtering**: Only processes Mars missions with "Completed" status
- **Robust Parsing**: Handles inconsistent spacing and extra text in fields
- **Header Resilience**: Skips comment lines and headers containing "Date"
- **Tie Handling**: Returns the first mission encountered with maximum duration

### Performance
- **Single Pass**: Reads the file once, processing ~105K lines
- **Minimal Memory**: Uses constant space (only tracks maximum values)
- **Optimized**: Uses `LC_ALL=C` for faster string processing

## Performance Analysis

**Test Environment**: Apple M2, macOS Darwin 24.6.0

**Measurements** (3 runs):
- Run 1: 0.62 real, 0.59 user, 0.01 sys
- Run 2: 0.59 real, 0.58 user, 0.00 sys  
- Run 3: 0.62 real, 0.60 user, 0.01 sys

**Median**: ~0.61 seconds elapsed time

**Memory Usage**: ~2.1MB peak resident set

The script processes approximately 172K lines per second, making it highly efficient for log analysis tasks.

## Script Walkthrough

### BEGIN Block
```awk
BEGIN {
    FS = "[[:space:]]*\\|[[:space:]]*"  # Set field separator
    max_duration = -1                    # Initialize tracking variables
    max_code = ""
}
```

### Line Processing
1. **Sanitization**: Remove Windows line endings
2. **Filtering**: Skip comments, blanks, and headers
3. **Field Extraction**: Get destination, status, duration, security code
4. **Normalization**: Trim whitespace from all fields
5. **Validation**: Check for Mars + Completed combination
6. **Duration Parsing**: Extract numeric value from duration field
7. **Maximum Tracking**: Update if current duration exceeds maximum

### END Block
```awk
END {
    if (max_duration >= 0 && max_code != "") {
        print max_code
    } else {
        print "NO_RESULT" > "/dev/stderr"
        exit 1
    }
}
```
Outputs the security code or error if no valid missions found.

## How to Run

### Method 1: Script File
```bash
./find_mars_code.awk space_missions.log
```

### Method 2: One-liner
```bash
LC_ALL=C awk -F '[[:space:]]*\|[[:space:]]*' 'BEGIN{max=-1} /^[[:space:]]*#/||/^[[:space:]]*$/ {next} $1 ~ /Date/ {next} NF >= 8 { dest=$3; status=$4; dur=$6; code=$8; gsub(/^[[:space:]]+|[[:space:]]+$/, "", dest); gsub(/^[[:space:]]+|[[:space:]]+$/, "", status); gsub(/^[[:space:]]+|[[:space:]]+$/, "", dur); gsub(/^[[:space:]]+|[[:space:]]+$/, "", code); if (tolower(dest)!="mars" || tolower(status)!="completed") next; if (match(dur, /[0-9]+(\.[0-9]+)?/)) { d=substr(dur,RSTART,RLENGTH)+0; if (d>max) { max=d; mc=code; if (match(mc, /[A-Z]{3}-[0-9]{3}-[A-Z]{3}/)) mc=substr(mc,RSTART,RLENGTH) } } } END{ if (max>=0 && mc!="") print mc; else { print "NO_RESULT" > "/dev/stderr"; exit 1 } }' space_missions.log
```

### Method 3: Run Script
```bash
./run.sh
```

## Output
For the provided dataset, the longest successful Mars mission has a duration of **1629 days** and the security code is:

**XRT-421-ZQP**

## Mission Details
The longest successful Mars mission was:
- Date: 2065-06-05
- Mission ID: WGU-0200  
- Destination: Mars
- Status: Completed
- Crew Size: 4
- Duration: 1629 days
- Success Rate: 98.82%
- Security Code: XRT-421-ZQP

## Development Time
This solution was implemented and tested in approximately **15-20 minutes**, including:
- Dataset analysis and exploration (5 min)
- AWK script development and debugging (8 min)
- Performance testing and validation (3 min)  
- Documentation (4 min)

----- END FILE: SOLUTION_README.md -----

----- BEGIN FILE: WARP.md -----

# WARP.md

This file provides guidance to WARP (warp.dev) when working with code in this repository.

## Project Overview
This repository contains a Warp hiring challenge focused on analyzing space mission log files using AWK. The goal is to find the security code of the longest successful Mars mission from a large dataset (~105K lines) using efficient text processing.

## Quick Start

### Running the Solution
```bash
# Run with the main dataset
./run.sh space_missions.log

# Or call the AWK script directly
./find_mars_code.awk space_missions.log

# Test with sample data
./find_mars_code.awk tests/space_missions.sample.log
```

### Setup Requirements
```bash
# Check AWK version (macOS system awk works fine for this project)
awk --version

# For performance-critical use, install GNU AWK if needed
brew install gawk  # macOS
sudo apt-get install gawk  # Ubuntu/Debian
```

## Architecture

### Core Components
- **`find_mars_code.awk`**: Main AWK script that parses mission logs and finds the longest successful Mars mission
- **`run.sh`**: Shell wrapper that invokes the AWK script with optimal environment settings
- **`space_missions.log`**: Primary dataset (~105K lines of mission data)
- **`tests/space_missions.sample.log`**: Sample dataset for testing and development

### AWK Script Architecture

#### BEGIN Block
- Sets field separator to handle pipe-delimited format with variable whitespace: `FS = "[[:space:]]*\\|[[:space:]]*"`
- Initializes tracking variables for maximum duration and corresponding security code

#### Record Processing
- **Filtering**: Skips comment lines (`#`), blank lines, and header rows containing "Date"
- **Field Extraction**: Extracts destination, status, duration, and security code from pipe-separated fields
- **Normalization**: Trims whitespace from all fields using `gsub()`
- **Validation**: Only processes Mars missions with "Completed" status (case-insensitive)
- **Duration Parsing**: Extracts numeric values from duration field that may contain text like "365 days" or "approx. 400"

#### END Block
- Outputs the security code of the longest mission, or error message if none found
- Performs final security code pattern validation (ABC-123-XYZ format)

### Data Format
```
Date | Mission ID | Destination | Status | Crew Size | Duration (days) | Success Rate | Security Code
```

Key parsing challenges:
- Inconsistent whitespace around pipe separators
- Duration field contains mixed text and numbers
- Comment lines and system checkpoint records mixed in data
- Case variations in destination and status fields

## Development Commands

### Testing and Validation
```bash
# Run with sample data for quick testing
./find_mars_code.awk tests/space_missions.sample.log

# Test with different input methods
cat tests/space_missions.sample.log | ./find_mars_code.awk

# Performance measurement with timing
/usr/bin/time -l ./find_mars_code.awk space_missions.log
```

### Development and Debugging
```bash
# Add debug output by modifying the script temporarily
# (The script is designed for clean output - modify cautiously)

# Check field parsing on first few lines
head -20 space_missions.log | ./find_mars_code.awk

# Validate field separator handling
awk -F '[[:space:]]*\|[[:space:]]*' 'NR<=10 {print NF, "|", $0}' tests/space_missions.sample.log
```

### Performance Optimization
```bash
# Run with optimal environment for performance
LC_ALL=C ./find_mars_code.awk space_missions.log

# For GNU AWK if available
LC_ALL=C gawk -O -f find_mars_code.awk space_missions.log

# Memory and timing analysis
/usr/bin/time -l ./find_mars_code.awk space_missions.log
```

## Expected Results

### Sample Data
- Input: `tests/space_missions.sample.log`
- Expected output: `GHI-789-JKL`

### Full Dataset
- Input: `space_missions.log` (~105K lines)
- Expected output: `XRT-421-ZQP`
- Corresponding mission: WGU-0200 (1629 days)

## Performance Characteristics
- **Processing Speed**: ~172K lines per second on Apple M2
- **Memory Usage**: ~2MB peak resident set
- **Execution Time**: ~0.6 seconds for 105K line dataset
- **Algorithm**: Single-pass streaming with constant memory usage

## Cross-Platform Notes

### macOS
- Uses system AWK (version 20200816) - works fine for this project
- BSD awk handles the regex patterns and field operations correctly

### Linux
- GNU AWK recommended for optimal performance
- Use `LC_ALL=C` environment for faster string operations

### AWK Compatibility
- Script uses POSIX-compatible AWK features
- No GNU AWK-specific extensions required
- Regex patterns use standard POSIX character classes

----- END FILE: WARP.md -----

=============================
Comprehensive Summary Report
=============================

## Challenge overview and objective
## Project Overview
This repository contains a Warp hiring challenge focused on analyzing space mission log files using AWK. The goal is to find the security code of the longest successful Mars mission from a large dataset (~105K lines) using efficient text processing.


## Solution approach and techniques used
# Space Mission Log Analysis - AWK Solution

## Goal
## Architecture

### AWK Script Architecture


## Performance metrics and analysis
## Performance Characteristics
- **Processing Speed**: ~172K lines per second on Apple M2
- **Memory Usage**: ~2MB peak resident set
- **Execution Time**: ~0.6 seconds for 105K line dataset
- **Algorithm**: Single-pass streaming with constant memory usage


## File structure and components

### Core components (from WARP.md)
### Core Components
- **`find_mars_code.awk`**: Main AWK script that parses mission logs and finds the longest successful Mars mission
- **`run.sh`**: Shell wrapper that invokes the AWK script with optimal environment settings
- **`space_missions.log`**: Primary dataset (~105K lines of mission data)
- **`tests/space_missions.sample.log`**: Sample dataset for testing and development


### Repository tree (depth 3)
.
├── .gitignore
├── ANSWER.txt
├── find_mars_code.awk
├── mission_challenge.md
├── README.md
├── run.sh
├── solution_full_report.txt
├── SOLUTION_README.md
├── solution_report.sh
├── space_missions.log
├── tests
│   └── space_missions.sample.log
└── WARP.md

2 directories, 12 files

## Expected results and validation
## Expected Results


### How to validate (from WARP.md Quick Start)
### Running the Solution
```bash

## Development timeline

### Recent commits
- 2025-08-31 dca8223 Update find_mars_code.awk and run.sh (Mike)
- 2025-08-31 c89bdc7 Add new theme styles, color mode toggler, and favicon assets (Mike)
- 2025-03-25 eec09ef Initial commit (Daniel Peng)
### Contributors
     2	Mike <garzarobm@gmail.com>
     1	Daniel Peng <danielpeng2@gmail.com>

Report complete.
